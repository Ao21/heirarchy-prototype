/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Account } from '../model/account';
import { ApprovalRequest } from '../model/approvalRequest';
import { ApproverList } from '../model/approverList';
import { Comment } from '../model/comment';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ApprovalControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * approveAccountApproval
     * 
     * @param userId userId
     * @param accountId accountId
     * @param approvalId approvalId
     * @param comment comment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public approveAccountApprovalUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public approveAccountApprovalUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public approveAccountApprovalUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public approveAccountApprovalUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling approveAccountApprovalUsingPOST.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling approveAccountApprovalUsingPOST.');
        }
        if (approvalId === null || approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling approveAccountApprovalUsingPOST.');
        }
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling approveAccountApprovalUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Account>(`${this.configuration.basePath}/accountCreationApproval/approve/${encodeURIComponent(String(accountId))}/${encodeURIComponent(String(approvalId))}`,
            comment,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * approveAccountUpdate
     * 
     * @param userId userId
     * @param accountId accountId
     * @param approvalId approvalId
     * @param comment comment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public approveAccountUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public approveAccountUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public approveAccountUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public approveAccountUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling approveAccountUpdateUsingPOST.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling approveAccountUpdateUsingPOST.');
        }
        if (approvalId === null || approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling approveAccountUpdateUsingPOST.');
        }
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling approveAccountUpdateUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Account>(`${this.configuration.basePath}/accountUpdateApproval/approve/${encodeURIComponent(String(accountId))}/${encodeURIComponent(String(approvalId))}`,
            comment,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * approveClientAccountStatusUpdate
     * 
     * @param userId userId
     * @param accountId accountId
     * @param approvalId approvalId
     * @param comment comment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public approveClientAccountStatusUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public approveClientAccountStatusUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public approveClientAccountStatusUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public approveClientAccountStatusUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling approveClientAccountStatusUpdateUsingPOST.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling approveClientAccountStatusUpdateUsingPOST.');
        }
        if (approvalId === null || approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling approveClientAccountStatusUpdateUsingPOST.');
        }
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling approveClientAccountStatusUpdateUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Account>(`${this.configuration.basePath}/clientAccoutStatusUpdateApproval/approve/${encodeURIComponent(String(accountId))}/${encodeURIComponent(String(approvalId))}`,
            comment,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAccountsPendingApproval
     * 
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccountsPendingApprovalUsingGET(userId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ApprovalRequest>>;
    public getAccountsPendingApprovalUsingGET(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ApprovalRequest>>>;
    public getAccountsPendingApprovalUsingGET(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ApprovalRequest>>>;
    public getAccountsPendingApprovalUsingGET(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getAccountsPendingApprovalUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ApprovalRequest>>(`${this.configuration.basePath}/accounts/pending-approval`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getApproverList
     * 
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getApproverListUsingGET(userId: string, observe?: 'body', reportProgress?: boolean): Observable<ApproverList>;
    public getApproverListUsingGET(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ApproverList>>;
    public getApproverListUsingGET(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ApproverList>>;
    public getApproverListUsingGET(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getApproverListUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ApproverList>(`${this.configuration.basePath}/approvers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * rejectAccountApproval
     * 
     * @param userId userId
     * @param accountId accountId
     * @param approvalId approvalId
     * @param comment comment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rejectAccountApprovalUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public rejectAccountApprovalUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public rejectAccountApprovalUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public rejectAccountApprovalUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling rejectAccountApprovalUsingPOST.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling rejectAccountApprovalUsingPOST.');
        }
        if (approvalId === null || approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling rejectAccountApprovalUsingPOST.');
        }
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling rejectAccountApprovalUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Account>(`${this.configuration.basePath}/accountCreationApproval/reject/${encodeURIComponent(String(accountId))}/${encodeURIComponent(String(approvalId))}`,
            comment,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * rejectAccountUpdate
     * 
     * @param userId userId
     * @param accountId accountId
     * @param approvalId approvalId
     * @param comment comment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rejectAccountUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public rejectAccountUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public rejectAccountUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public rejectAccountUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling rejectAccountUpdateUsingPOST.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling rejectAccountUpdateUsingPOST.');
        }
        if (approvalId === null || approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling rejectAccountUpdateUsingPOST.');
        }
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling rejectAccountUpdateUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Account>(`${this.configuration.basePath}/accountUpdateApproval/reject/${encodeURIComponent(String(accountId))}/${encodeURIComponent(String(approvalId))}`,
            comment,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * rejectClientAccountStatusUpdate
     * 
     * @param userId userId
     * @param accountId accountId
     * @param approvalId approvalId
     * @param comment comment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rejectClientAccountStatusUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public rejectClientAccountStatusUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public rejectClientAccountStatusUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public rejectClientAccountStatusUpdateUsingPOST(userId: string, accountId: string, approvalId: string, comment: Comment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling rejectClientAccountStatusUpdateUsingPOST.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling rejectClientAccountStatusUpdateUsingPOST.');
        }
        if (approvalId === null || approvalId === undefined) {
            throw new Error('Required parameter approvalId was null or undefined when calling rejectClientAccountStatusUpdateUsingPOST.');
        }
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling rejectClientAccountStatusUpdateUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Account>(`${this.configuration.basePath}/clientAccoutStatusUpdateApproval/reject/${encodeURIComponent(String(accountId))}/${encodeURIComponent(String(approvalId))}`,
            comment,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
