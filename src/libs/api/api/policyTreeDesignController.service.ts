/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AccountDetail } from '../model/accountDetail';
import { AvailableAccount } from '../model/availableAccount';
import { PolicyTree } from '../model/policyTree';
import { PolicyTreeDesign } from '../model/policyTreeDesign';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class PolicyTreeDesignControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * findAvailableAccounts
     * 
     * @param parentAccountId parentAccountId
     * @param userId userId
     * @param policyTreeDesign policyTreeDesign
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAvailableAccountsUsingPOST(parentAccountId: string, userId: string, policyTreeDesign: PolicyTreeDesign, observe?: 'body', reportProgress?: boolean): Observable<Array<AvailableAccount>>;
    public findAvailableAccountsUsingPOST(parentAccountId: string, userId: string, policyTreeDesign: PolicyTreeDesign, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AvailableAccount>>>;
    public findAvailableAccountsUsingPOST(parentAccountId: string, userId: string, policyTreeDesign: PolicyTreeDesign, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AvailableAccount>>>;
    public findAvailableAccountsUsingPOST(parentAccountId: string, userId: string, policyTreeDesign: PolicyTreeDesign, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (parentAccountId === null || parentAccountId === undefined) {
            throw new Error('Required parameter parentAccountId was null or undefined when calling findAvailableAccountsUsingPOST.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling findAvailableAccountsUsingPOST.');
        }
        if (policyTreeDesign === null || policyTreeDesign === undefined) {
            throw new Error('Required parameter policyTreeDesign was null or undefined when calling findAvailableAccountsUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<AvailableAccount>>(`${this.configuration.basePath}/policyTreeDesign/availableAccounts/${encodeURIComponent(String(parentAccountId))}`,
            policyTreeDesign,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAccountDetail
     * 
     * @param accountId accountId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccountDetailUsingGET(accountId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<AccountDetail>;
    public getAccountDetailUsingGET(accountId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AccountDetail>>;
    public getAccountDetailUsingGET(accountId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AccountDetail>>;
    public getAccountDetailUsingGET(accountId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getAccountDetailUsingGET.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getAccountDetailUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AccountDetail>(`${this.configuration.basePath}/policyTreeDesign/accountdetails/${encodeURIComponent(String(accountId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPolicyTreeDesign
     * 
     * @param accountId accountId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPolicyTreeDesignUsingGET(accountId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<PolicyTreeDesign>;
    public getPolicyTreeDesignUsingGET(accountId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PolicyTreeDesign>>;
    public getPolicyTreeDesignUsingGET(accountId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PolicyTreeDesign>>;
    public getPolicyTreeDesignUsingGET(accountId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getPolicyTreeDesignUsingGET.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getPolicyTreeDesignUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PolicyTreeDesign>(`${this.configuration.basePath}/policyTreeDesign/policyTree/${encodeURIComponent(String(accountId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPolicyTreeDetails
     * 
     * @param accountId accountId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPolicyTreeDetailsUsingGET(accountId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<PolicyTree>;
    public getPolicyTreeDetailsUsingGET(accountId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PolicyTree>>;
    public getPolicyTreeDetailsUsingGET(accountId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PolicyTree>>;
    public getPolicyTreeDetailsUsingGET(accountId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getPolicyTreeDetailsUsingGET.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getPolicyTreeDetailsUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PolicyTree>(`${this.configuration.basePath}/policyTreeDesign/policyTreeDetails/${encodeURIComponent(String(accountId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * newPolicyTreeDesign
     * 
     * @param userId userId
     * @param policyTreeDesign newPolicyTreeDesign
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public newPolicyTreeDesignUsingPOST(userId: string, policyTreeDesign: PolicyTreeDesign, observe?: 'body', reportProgress?: boolean): Observable<PolicyTreeDesign>;
    public newPolicyTreeDesignUsingPOST(userId: string, policyTreeDesign: PolicyTreeDesign, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PolicyTreeDesign>>;
    public newPolicyTreeDesignUsingPOST(userId: string, policyTreeDesign: PolicyTreeDesign, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PolicyTreeDesign>>;
    public newPolicyTreeDesignUsingPOST(userId: string, policyTreeDesign: PolicyTreeDesign, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling newPolicyTreeDesignUsingPOST.');
        }
        if (policyTreeDesign === null || policyTreeDesign === undefined) {
            throw new Error('Required parameter policyTreeDesign was null or undefined when calling newPolicyTreeDesignUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PolicyTreeDesign>(`${this.configuration.basePath}/policyTreeDesign`,
            policyTreeDesign,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updatePolicyTree
     * 
     * @param userId userId
     * @param policyTreeDesign updatedPolicyTree
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePolicyTreeUsingPUT(userId: string, policyTreeDesign: PolicyTreeDesign, observe?: 'body', reportProgress?: boolean): Observable<PolicyTreeDesign>;
    public updatePolicyTreeUsingPUT(userId: string, policyTreeDesign: PolicyTreeDesign, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PolicyTreeDesign>>;
    public updatePolicyTreeUsingPUT(userId: string, policyTreeDesign: PolicyTreeDesign, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PolicyTreeDesign>>;
    public updatePolicyTreeUsingPUT(userId: string, policyTreeDesign: PolicyTreeDesign, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updatePolicyTreeUsingPUT.');
        }
        if (policyTreeDesign === null || policyTreeDesign === undefined) {
            throw new Error('Required parameter policyTreeDesign was null or undefined when calling updatePolicyTreeUsingPUT.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<PolicyTreeDesign>(`${this.configuration.basePath}/policyTreeDesign`,
            policyTreeDesign,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
