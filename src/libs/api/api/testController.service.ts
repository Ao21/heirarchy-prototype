/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Account } from '../model/account';
import { PolicyTree } from '../model/policyTree';
import { PolicyTreeWithTreeDesign } from '../model/policyTreeWithTreeDesign';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class TestControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * createAccount
     * 
     * @param account account
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAccountUsingPOST(account: Account, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public createAccountUsingPOST(account: Account, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public createAccountUsingPOST(account: Account, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public createAccountUsingPOST(account: Account, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling createAccountUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Account>(`${this.configuration.basePath}/test/account`,
            account,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createAccounts
     * 
     * @param account newAccounts
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAccountsUsingPOST(account: Array<Account>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createAccountsUsingPOST(account: Array<Account>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createAccountsUsingPOST(account: Array<Account>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createAccountsUsingPOST(account: Array<Account>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling createAccountsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/test/accounts`,
            account,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createPolicyTrees
     * 
     * @param policyTree newPolicyTrees
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPolicyTreesUsingPOST(policyTree: Array<PolicyTree>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createPolicyTreesUsingPOST(policyTree: Array<PolicyTree>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createPolicyTreesUsingPOST(policyTree: Array<PolicyTree>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createPolicyTreesUsingPOST(policyTree: Array<PolicyTree>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (policyTree === null || policyTree === undefined) {
            throw new Error('Required parameter policyTree was null or undefined when calling createPolicyTreesUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/test/policytrees`,
            policyTree,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createPolicyTreesWithDesign
     * 
     * @param policyTreeWithTreeDesign newPolicyTreesWithDesign
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPolicyTreesWithDesignUsingPOST(policyTreeWithTreeDesign: Array<PolicyTreeWithTreeDesign>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createPolicyTreesWithDesignUsingPOST(policyTreeWithTreeDesign: Array<PolicyTreeWithTreeDesign>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createPolicyTreesWithDesignUsingPOST(policyTreeWithTreeDesign: Array<PolicyTreeWithTreeDesign>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createPolicyTreesWithDesignUsingPOST(policyTreeWithTreeDesign: Array<PolicyTreeWithTreeDesign>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (policyTreeWithTreeDesign === null || policyTreeWithTreeDesign === undefined) {
            throw new Error('Required parameter policyTreeWithTreeDesign was null or undefined when calling createPolicyTreesWithDesignUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/test/policytreesWithDesign`,
            policyTreeWithTreeDesign,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteAccounts
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAccountsUsingDELETE(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAccountsUsingDELETE(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAccountsUsingDELETE(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAccountsUsingDELETE(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/test/accounts`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
