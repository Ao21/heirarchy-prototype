/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Account } from '../model/account';
import { AccountApproval } from '../model/accountApproval';
import { AccountMetaModel } from '../model/accountMetaModel';
import { EditableFields } from '../model/editableFields';
import { Errors } from '../model/errors';
import { FieldOrdering } from '../model/fieldOrdering';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class AccountControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * allAccounts
     * 
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public allAccountsUsingGET(userId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Account>>;
    public allAccountsUsingGET(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Account>>>;
    public allAccountsUsingGET(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Account>>>;
    public allAccountsUsingGET(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling allAccountsUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Account>>(`${this.configuration.basePath}/accounts`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * cloneAccount
     * 
     * @param accountId accountId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cloneAccountUsingGET(accountId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public cloneAccountUsingGET(accountId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public cloneAccountUsingGET(accountId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public cloneAccountUsingGET(accountId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling cloneAccountUsingGET.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling cloneAccountUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Account>(`${this.configuration.basePath}/accounts/clone/${encodeURIComponent(String(accountId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createAccount
     * 
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAccountUsingGET(userId: string, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public createAccountUsingGET(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public createAccountUsingGET(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public createAccountUsingGET(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling createAccountUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Account>(`${this.configuration.basePath}/accounts/create`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * errors
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public errorsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Errors>;
    public errorsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Errors>>;
    public errorsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Errors>>;
    public errorsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Errors>(`${this.configuration.basePath}/errors`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * fieldOrdering
     * 
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fieldOrderingUsingGET(userId: string, observe?: 'body', reportProgress?: boolean): Observable<FieldOrdering>;
    public fieldOrderingUsingGET(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FieldOrdering>>;
    public fieldOrderingUsingGET(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FieldOrdering>>;
    public fieldOrderingUsingGET(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling fieldOrderingUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<FieldOrdering>(`${this.configuration.basePath}/accounts/ordering`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAccount
     * 
     * @param accountId accountId
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAccountUsingGET(accountId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public getAccountUsingGET(accountId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public getAccountUsingGET(accountId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public getAccountUsingGET(accountId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getAccountUsingGET.');
        }
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getAccountUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Account>(`${this.configuration.basePath}/accounts/${encodeURIComponent(String(accountId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getFieldsForEditionForAccount
     * 
     * @param userId userId
     * @param accountId accountId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFieldsForEditionForAccountUsingGET(userId: string, accountId: string, observe?: 'body', reportProgress?: boolean): Observable<EditableFields>;
    public getFieldsForEditionForAccountUsingGET(userId: string, accountId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EditableFields>>;
    public getFieldsForEditionForAccountUsingGET(userId: string, accountId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EditableFields>>;
    public getFieldsForEditionForAccountUsingGET(userId: string, accountId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getFieldsForEditionForAccountUsingGET.');
        }
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getFieldsForEditionForAccountUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EditableFields>(`${this.configuration.basePath}/accounts/fieldsforeditionForAccount/${encodeURIComponent(String(accountId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getFieldsForEdition
     * 
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFieldsForEditionUsingGET(userId: string, observe?: 'body', reportProgress?: boolean): Observable<EditableFields>;
    public getFieldsForEditionUsingGET(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EditableFields>>;
    public getFieldsForEditionUsingGET(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EditableFields>>;
    public getFieldsForEditionUsingGET(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getFieldsForEditionUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<EditableFields>(`${this.configuration.basePath}/accounts/fieldsforedition`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * loadAccountMetaModel
     * 
     * @param userId userId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadAccountMetaModelUsingGET(userId: string, observe?: 'body', reportProgress?: boolean): Observable<AccountMetaModel>;
    public loadAccountMetaModelUsingGET(userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AccountMetaModel>>;
    public loadAccountMetaModelUsingGET(userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AccountMetaModel>>;
    public loadAccountMetaModelUsingGET(userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling loadAccountMetaModelUsingGET.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AccountMetaModel>(`${this.configuration.basePath}/accounts/metamodel`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * newAccount
     * 
     * @param userId userId
     * @param accountApproval accountApproval
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public newAccountUsingPOST(userId: string, accountApproval: AccountApproval, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public newAccountUsingPOST(userId: string, accountApproval: AccountApproval, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public newAccountUsingPOST(userId: string, accountApproval: AccountApproval, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public newAccountUsingPOST(userId: string, accountApproval: AccountApproval, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling newAccountUsingPOST.');
        }
        if (accountApproval === null || accountApproval === undefined) {
            throw new Error('Required parameter accountApproval was null or undefined when calling newAccountUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Account>(`${this.configuration.basePath}/accounts`,
            accountApproval,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveAccount
     * 
     * @param userId userId
     * @param account account
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveAccountUsingPOST(userId: string, account: Account, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public saveAccountUsingPOST(userId: string, account: Account, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public saveAccountUsingPOST(userId: string, account: Account, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public saveAccountUsingPOST(userId: string, account: Account, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling saveAccountUsingPOST.');
        }
        if (account === null || account === undefined) {
            throw new Error('Required parameter account was null or undefined when calling saveAccountUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Account>(`${this.configuration.basePath}/accounts/save`,
            account,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateAccount
     * 
     * @param userId userId
     * @param accountApproval accountApproval
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAccountUsingPOST(userId: string, accountApproval: AccountApproval, observe?: 'body', reportProgress?: boolean): Observable<Account>;
    public updateAccountUsingPOST(userId: string, accountApproval: AccountApproval, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Account>>;
    public updateAccountUsingPOST(userId: string, accountApproval: AccountApproval, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Account>>;
    public updateAccountUsingPOST(userId: string, accountApproval: AccountApproval, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling updateAccountUsingPOST.');
        }
        if (accountApproval === null || accountApproval === undefined) {
            throw new Error('Required parameter accountApproval was null or undefined when calling updateAccountUsingPOST.');
        }

        let headers = this.defaultHeaders;
        if (userId !== undefined && userId !== null) {
            headers = headers.set('userId', String(userId));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Account>(`${this.configuration.basePath}/accounts/update`,
            accountApproval,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
